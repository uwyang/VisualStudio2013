@{
    ViewBag.Title = "getData";
}

@section JavaScriptHeader
{
    <style>
        #map-canvas {
            height: 350px;
            width: 100%;
            background: transparent url(images/loading.GIF) no-repeat center center;
        }

        .controls {
            margin-top: 16px;
            border: 1px solid transparent;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            height: 32px;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
        }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        .pac-container {
            font-family: Roboto;
        }

        #type-selector {
            color: #fff;
            background-color: #4d90fe;
            padding: 5px 11px 0px 11px;
        }

            #type-selector label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }
    </style>
    <title>Places search box</title>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDIpPyiWV_dzWdD2vK3yPdL5D75mO61zHU&v=3.exp&signed_in=true&libraries=places"></script>
    <script>
        // This example adds a search box to a map, using the Google Place Autocomplete
        // feature. People can enter geographical searches. The search box will return a
        // pick list containing a mix of places and predicted search terms.

        var currplace;
        var map;
        var service;

        function initialize() {

            var markers = [];
            map = new google.maps.Map(document.getElementById('map-canvas'), {
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });

            var defaultBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(-33.8902, 151.1759),
                new google.maps.LatLng(-33.8474, 151.2631));
            map.fitBounds(defaultBounds);

            // Create the search box and link it to the UI element.
            var input = (
            document.getElementById('pac-input'));
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            var searchBox = new google.maps.places.SearchBox(
              (input));

            // [START region_getplaces]
            // Listen for the event fired when the user selects an item from the
            // pick list. Retrieve the matching places for that item.
            google.maps.event.addListener(searchBox, 'places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }
                for (var i = 0, marker; marker = markers[i]; i++) {
                    marker.setMap(null);
                }

                // For each place, get the icon, place name, and location.
                markers = [];
                var bounds = new google.maps.LatLngBounds();
                for (var i = 0, place; place = places[i]; i++) {
                    var image = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    // Create a marker for each place.
                    var marker = new google.maps.Marker({
                        map: map,
                        icon: image,
                        title: place.name,
                        position: place.geometry.location
                    });

                    markers.push(marker);

                    bounds.extend(place.geometry.location);
                    currplace = places[0];
                    service = new google.maps.places.PlacesService(map);
                }

                map.fitBounds(bounds);
            });
            // [END region_getplaces]

            // Bias the SearchBox results towards places that are within the bounds of the
            // current map's viewport.
            google.maps.event.addListener(map, 'bounds_changed', function () {
                var bounds = map.getBounds();
                searchBox.setBounds(bounds);
            });
        }

        google.maps.event.addDomListener(window, 'load', initialize);

        var i = 9;
        var currdetail;
       

        function getDetails() {
            console.log("define request");
            var request = { reference: currplace.reference };
            console.log("get details");
            service.getDetails(request, function (details, status) {
                makeData(details);
            });
            i++;
        }

        function makeData(details) {
            
            currdetail = details;

            console.log("compiling data");
            address = details.address_components[0].long_name + " " + details.address_components[1].long_name;
            town = details.address_components[2].long_name;
            prov = details.address_components[3].short_name;
            country = details.address_components[4].long_name;
            lat = currplace.geometry.location.lat();
            lng = currplace.geometry.location.lng();

            name = details.name;
            var currdata = "";
            currdata += "new ParkingSpot <br>{ <br>";
            currdata += ("Id = " + i + ",<br>");
            currdata += ("OwnerId = " + i + ", <br>");
            currdata += ('ShortName = "' + name + '", <br>');
            currdata += ('Address = "' + address + '", <br>');
            currdata += ('City = "' + town + '", <br>');
            currdata += ('Province = "' + prov + '", <br>');
            currdata += ('Country = "' + country + '", <br>');
            currdata += ("lat = " + lat + ",<br>");
            currdata += ("lng = " + lng + ",<br>");
            currdata += ("}, <br> <br>");
            var showdata = document.getElementById("data");
            showdata.innerHTML += currdata;
            /*new ParkingSpot
            {
                Id = 0,
                OwnerId = 0,
                ShortName = "Communitech",
                Address = "151 Charles Street West, Suite 100",
                City = "Kitchener",
                Province = "Ontario",
                Country = "Canada",
                lat = 43.451616,
                lng = -80.498904
            },*/
        }

    </script>
    <style>
        #target {
            width: 345px;
        }
    </style>


}


<h2>getData</h2>


<div class="col-lg-6">
    <body>
        <input id="pac-input" class="controls" type="text" placeholder="Search Box">
        <div id="map-canvas"></div>
    </body>

</div>
<div class="col-lg-6">
    <button class="btn-info" onclick="getDetails();">get data</button>
    <div id="data">

    </div>

</div>
